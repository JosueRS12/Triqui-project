{"version":3,"sources":["components/game/board.js","index.js"],"names":["Square","props","useState","value","setValue","type","onClick","id","square","document","getElementById","turn","disabled","count","setCombinationsX","add","VerifyEndGame","setCombinationsO","console","log","ChangeValueSquare","className","i","Set","setWinningCombinations","moves","setPlayerMovements","player","alert","prototype","isSuperset","subset","elem","this","has","combination","WinningCombinations","Amor","target","href","HowToUseHooks","setCount","useEffect","title","Board","state","board","resetBoard","bind","push","length","setState","fillSquare","map","element","React","Component","Layout","Navbar","bg","expand","Container","Brand","Toggle","aria-controls","Collapse","Nav","Link","ReactDOM","render"],"mappings":"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","file":"static/js/main.3041c1d9.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './board.css';\n\nfunction Square(props){\n  const [value,setValue] = useState('');\n  return(\n    <button type=\"button\" onClick={()=>setValue(ChangeValueSquare(props.id, value))} id={props.id} className=\"square\" >\n      {value} \n    </button>\n  );\n}\n\n\n//change value of squares\nlet i = 1;\nconsole.log(i);\ni++;\nlet turn = false;\nlet count = 0;\n//values for player combinations\nlet setCombinationsX = new Set();\nlet setCombinationsO = new Set();\n//two players: X and O\nfunction ChangeValueSquare(id, value){ \n  var square = document.getElementById(id);\n  //console.log(id);\n  //if(count === 9)\n    //count = 0;\n  if(turn){\n    //movement player x => true\n    square.disabled = true;\n    turn = !turn;\n    count++;\n    setCombinationsX.add(id);\n    VerifyEndGame(count, setCombinationsX, 'X');\n    return 'X'; \n  }else{ //movement player o => false\n    square.disabled = true;\n    turn = !turn;\n    count++;\n    setCombinationsO.add(id);\n    console.log(`o ${setCombinationsO}`);\n    //console.log('O '+id);\n    VerifyEndGame(count, setCombinationsO, 'O');\n    return 'O';\n  }\n}\n//verify winner\n//primero verificar que todos los botones esten deshabilitados, de ese modo se\n//sabe que el juego terminó: Cuando count es = 9, todos se encuentrar\n//deshabilitados.\n//segundo crear las combinaciones posibles para ganar.\n//comprobrar si el player X ó el player O es el ganador.\n\n//winning combinations\n\nconst setWinningCombinations = new Set([\n\n                    [0,1,2],\n                    [3,4,5],\n                    [6,7,8],\n                    [0,3,6],\n                    [1,4,7],\n                    [2,5,8],\n                    [2,4,6],\n                    [0,4,8] \n]);\n\nconst WinningCombinations = (setPlayerMovements, player) => {\n  // pasar un array con los indices\n  // position\n  ///////////////////////\n  // 0 1 2 WIN             // 0 1 2 WIN\n  // 3 4 5 WIN consecutivos// 3 4 5 WIN\n  // 6 7 8 WIN horizontales// 6 7 8\n  ///////////////////////\n  // 0     //     2  ////\n  //   4   //   4    ///\n  //     8 //6       ////  \n   \n  // eslint-disable-next-line\n  Set.prototype.isSuperset = function(subset) {\n      for (var elem of subset) {\n          if (!this.has(elem)) {\n              return false;\n          }\n      }\n      return true;\n  }\n\n  //verify if the player movements are the winning combinations\n  for (let combination of setWinningCombinations){\n    if(setPlayerMovements.isSuperset(combination)){\n      return true;\n    }\n  } \n\n  //console.log(setWinningCombinations);\n  \n  //let resultVerify = setVerify.isSuperset(setWinningCombinations); \n  //console.log(resultVerify);\n  //la combinación 1, 4, 7 no ganó\n\n  //console.log('combiWin values: '+combiWin.values());\n\n\n  //iterando\n  //combiWin.forEach((e)=>{\n    //console.log(e, typeof(e));\n  //});\n  \n  ////solución con map e includes\n  //let condition = combinations.includes(comb.map((e)=> {\n    //console.log(e);\n    //return e\n  //}));\n  //console.log(condition);\n  //if(condition){\n    \n    //return true; \n  //} \n  //else\n    //return false;\n\n\n  //solución con set ----------------------------------------------------\n  //ordenamiento in place\n  //console.log('set comb: '+ combiWin.has('2,4,6'));\n  //console.log([...combinationWinner]);\n  //comb.sort((a,b)=>{\n    //return a - b;\n  //});\n  //console.log(playerMovements+\" \"+player);\n  //const test = new Set([0,1,2]);\n  //console.log('test '+typeof(test));\n  //console.log('type combination winner '+typeof(combinationWinner));\n  //console.log(combinationWinner);\n  //console.log('has '+combinationWinner.isSuperset(test));\n\n  //console.log('comb ordened: '+comb);\n  //console.log(combinationWinner.has(playerMovements));\n  //return combinationWinner.has(playerMovements);\n  //-----------------------------------------------------------------------\n\n\n  //combinations.map((currentValue, index)=>{\n    ////console.log(comb)\n    ////comb => array con las combinaciones\n    //if(currentValue === comb)\n      //return currentValue;\n    //else\n      //return null;\n  //});\n}\n\n//verify end game\nfunction VerifyEndGame(moves, setPlayerMovements, player){\n  if(moves === 10){\n    alert('limite de movimientos');\n  }\n  else if(WinningCombinations(setPlayerMovements, player)){\n    alert(`ganó el jugador ${player}`);\n  }\n}\n\n\n//amorcito\n\nconst Amor = (props) =>{\n  return (\n    <div>\n      <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=5j2FE_K-rAA\">QUIERO...</a>   \n    </div>\n  ); \n}\n\n//hooks structure\nfunction HowToUseHooks(props){\n  //useState\n  //se inicializa la variable de estado que se desea usar\n  //se define el nombre (arbitrario) de la variable y su setter\n  const [count, setCount] = useState(0);\n\n\n  // useEffect\n  useEffect(() => {\n    document.title = `you clicked ${count} times`;\n  }); \n  return(\n    <div>\n      {count == 8 ? <Amor/> : null}\n      <p> valor acutal del button {count} </p>\n      <button type =\"button\" onClick={() => setCount(count+1)}>\n      click on me\n      </button>\n    </div>\n  );\n}\n\n\nexport default class Board extends React.Component{\n  \n  \n  constructor(props){\n    super(props);\n    this.state = {\n      board: [],\n      value: 0\n    };\n    this.resetBoard =  this.resetBoard.bind(this);\n  }\n  /*\n    0   1   2   \n    3   4   5   \n    6   7   8      \n    \n  */\n  \n  fillSquare(i){\n    for(let i = 0; i < 9; i++){\n      this.state.board.push(<Square id={i}/>);\n    }\n  }\n\n  componentDidUpdate(){\n    if(this.state.board.length>9){\n      this.resetBoard();\n\n    }\n  }\n\n  resetBoard(){ \n    this.setState({\n      board: [],\n      value: this.state.value+1\n    });\n\n    turn = false;\n    count = 0;\n    setCombinationsO = new Set();\n    setCombinationsX = new Set();\n\n    //combX = [];\n    //combO = [];\n    //this.state.board.forEach((e)=>{\n      //console.log(e, typeof(e));\n    //});\n    //this.state.board.splice(0);\n    //this.state.board.forEach((e)=>{\n      //console.log(e, typeof(e));\n    //});\n  }\n  \n  \n  render(){\n    this.fillSquare();\n    return(\n      <div className=\"board\"  key={this.state.value}>\n        <h1>¿JUEGAS?</h1>\n        <HowToUseHooks/>\n        <h3>Testing</h3> \n        \n          <div className=\"fil\">\n            {this.state.board.map((element, i)=> {\n              const fil = i<3? <div className=\"butt\" key={i}> {element} </div> : null; \n              return fil;\n          })}     \n          </div>\n          <div className=\"fil\">\n            {this.state.board.map((element, i)=> {\n             const fil = (i>=3 && i<6)? <div className=\"butt\" key={i}> {element} </div> : null; \n              return fil;\n          })}     \n          </div>\n          <div className=\"fil\"> \n            {this.state.board.map((element, i)=> {\n            const fil = (i>=6 && i<9)? <div className=\"butt\" key={i}> {element} </div> : null; \n            return fil;\n          })}     \n          </div> \n        <div> \n          <button type=\"button\" className=\"resetButton\" onClick={this.resetBoard}> ResetGame </button>\n        </div>\n      </div>\n    );\n  }\n\n}\n","//librerias de react\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n//vincular el css\nimport './index.css';\nimport Board from './components/game/board';\n//vincular boostrap\n//import Navbar from 'react-bootstrap/Navbar';\n//import Container from 'react-bootstrap/Container'\n//import Nav from 'react-bootstrap/Nav';\n//import NavDropdown from 'react-bootstrap/NavDropdown';\nimport { Button, Navbar, Container, Nav, NavDropdown } from 'react-bootstrap';\nconst Layout = (props) =>{\n  return (\n    <main>\n      <Navbar bg=\"light\" expand=\"lg\">\n      <Container>\n        <Navbar.Brand href=\"#home\">Triqui App</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link href=\"#home\">Repositorio</Nav.Link>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"#home\">redes sociales</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n      </Navbar>\n      <section id=\"game\">\n        <Board/>\n      </section>\n      \n      <section id=\"footer\">\n        <p>hola</p>\n      </section>\n    </main>\n    \n  );\n}\n\nexport default Layout;\n\nReactDOM.render(\n  <Layout/>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}